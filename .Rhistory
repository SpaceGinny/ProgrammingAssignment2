complete <- function(directory, id = 1:332){
## 'directory' is a character vector of length 1 indicating the location
## of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the number of
## complete cases
## it was not clear from the instructions whether I should only count
## complete cases for both polutants or just one, so I opted for both.
## In other words: only those rows (observations) where both sulfates
## and nitrates are measured are counted here.
AllFiles <- list.files(directory)
dat <- data.frame()
for(i in 1:length(id)){
# get the full file name for the id
Fle <- paste(directory,AllFiles[id[i]], sep = "/")
# read the file
allVal <- read.csv(Fle)
# add the id number to the data frame
dat[id[i],1] <- allVal[1,"ID"]
# get the data where both pollutants exist
com <- allVal[!is.na(allVal[,2]) & !is.na(allVal[,3]),]
# put the number of counts into the data frame
dat[id[i],2] <- nrow(com)
}
# add names to the columns
names(dat) <- c("id", "nobs")
}
Com <- complete(directory)
complete <- function(directory, id = 1:332){
## 'directory' is a character vector of length 1 indicating the location
## of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the number of
## complete cases
## it was not clear from the instructions whether I should only count
## complete cases for both polutants or just one, so I opted for both.
## In other words: only those rows (observations) where both sulfates
## and nitrates are measured are counted here.
AllFiles <- list.files(directory)
dat <- data.frame()
for(i in 1:length(id)){
# get the full file name for the id
Fle <- paste(directory,AllFiles[id[i]], sep = "/")
# read the file
allVal <- read.csv(Fle)
# add the id number to the data frame
dat[id[i],1] <- allVal[1,"ID"]
# get the data where both pollutants exist
com <- allVal[!is.na(allVal[,2]) & !is.na(allVal[,3]),]
# put the number of counts into the data frame
dat[id[i],2] <- nrow(com)
}
# add names to the columns
names(dat) <- c("id", "nobs")
dat
}
Com <- complete(directory)
View(Com)
Com <- complete(directory, id = c(1, 3, 5, 7, 11, 119))
complete <- function(directory, id = 1:332){
## 'directory' is a character vector of length 1 indicating the location
## of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form:
## id nobs
## 1 117
## 2 1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the number of
## complete cases
## it was not clear from the instructions whether I should only count
## complete cases for both polutants or just one, so I opted for both.
## In other words: only those rows (observations) where both sulfates
## and nitrates are measured are counted here.
AllFiles <- list.files(directory)
dat <- data.frame()
for(i in 1:length(id)){
# get the full file name for the id
Fle <- paste(directory,AllFiles[id[i]], sep = "/")
# read the file
allVal <- read.csv(Fle)
# add the id number to the data frame
dat[i,1] <- allVal[1,"ID"]
# get the data where both pollutants exist
com <- allVal[!is.na(allVal[,2]) & !is.na(allVal[,3]),]
# put the number of counts into the data frame
dat[i,2] <- nrow(com)
}
# add names to the columns
names(dat) <- c("id", "nobs")
dat
}
Com <- complete(directory, id = c(1, 3, 5, 7, 11, 119))
View(Com)
?mean
?list.files
Comp <- complete(directory)
threshold <- 22
ToUse <-Comp[,2 >= threshold]
ToUse <-Comp[Comp[,2] >= threshold,1]
threshold <- 100
ToUse <-Comp[Comp[,2] >= threshold,1]
ToUse
View(Comp)
View(Comp)
?cor
View(allVal)
Full <- paste(directory,AllFiles[id[i]], sep = "/")
oneF <- read.csv(Full)
x <- oneF[,"sulfate"]
y <- oneF[,"nitrate"]
howTo <- "pairwise.complete.obs"
corval(i) <- cor(oneF[,"nitrate"], oneF[,"sulfate"],use = howTo)
corval <- data.frame()
corval(i) <- cor(oneF[,"nitrate"], oneF[,"sulfate"],use = howTo)
corval[i] <- cor(oneF[,"nitrate"], oneF[,"sulfate"],use = howTo)
corval[i] <- cor(x, y,use = "pairwise.complete.obs")
cor(x, y,use = "pairwise.complete.obs")
corval <- rbind(corval, cor(x, y,use = "pairwise.complete.obs"))
corr <- function(directory, threshold = 0){
## 'directory' is a character vector of length 1 indicating the location
## of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number
## of completely observed observations (on all variables) required to
## compute the correlation between  nitrate and sulfate; the default
## is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
## use function cor
# Find the number of complete values for all files
Comp <- complete(directory)
# only use those above the threshold
ToUse <-Comp[Comp[,2] >= threshold,1]
corval <- data.frame()
# get files and for loop over files for correlation
AllFiles <- list.files(directory)
for(i in 1:length(ToUse)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
oneF <- read.csv(Full)
x <- oneF[,"sulfate"]
y <- oneF[,"nitrate"]
corval <- rbind(corval, cor(x, y,use = "pairwise.complete.obs"))
}
}
out <-corr(directory)
corr <- function(directory, threshold = 0){
## 'directory' is a character vector of length 1 indicating the location
## of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number
## of completely observed observations (on all variables) required to
## compute the correlation between  nitrate and sulfate; the default
## is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
## use function cor
# Find the number of complete values for all files
Comp <- complete(directory)
# only use those above the threshold
ToUse <-Comp[Comp[,2] >= threshold,1]
corval <- data.frame()
# get files and for loop over files for correlation
AllFiles <- list.files(directory)
for(i in 1:length(ToUse)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
oneF <- read.csv(Full)
x <- oneF[,"sulfate"]
y <- oneF[,"nitrate"]
corval <- rbind(corval, cor(x, y,use = "pairwise.complete.obs"))
}
corval
}
out <-corr(directory)
View(out)
pollutantmean("specdata", "sulfate", 1:10)
a <- pollutantmean("specdata", "sulfate", 1:10)
a
a <- pollutantmean("specdata", "sulfate", 1:10)
a
id = 1:10
AllFiles <- list.files(directory)
vals     <- data.frame()
for(i in 1:length(id)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
vals <- rbind(vals, read.csv(Full))
}
vals_sub <- vals[ ,pollutant]
out <- mean(vals_sub,na.rm = TRUE)
}
pollutant <- "sulfate"
AllFiles <- list.files(directory)
vals     <- data.frame()
for(i in 1:length(id)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
vals <- rbind(vals, read.csv(Full))
}
vals_sub <- vals[ ,pollutant]
out <- mean(vals_sub,na.rm = TRUE)
}
AllFiles <- list.files(directory)
vals     <- data.frame()
for(i in 1:length(id)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
vals <- rbind(vals, read.csv(Full))
}
vals_sub <- vals[ ,pollutant]
out <- mean(vals_sub,na.rm = TRUE)
pollutant = "nitrate"
pollutant <- "nitrate"
id <- 70:72
AllFiles <- list.files(directory)
vals     <- data.frame()
for(i in 1:length(id)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
vals <- rbind(vals, read.csv(Full))
}
vals_sub <- vals[ ,pollutant]
out <- mean(vals_sub,na.rm = TRUE)
pollutant <- "sulfate"
id <-34
AllFiles <- list.files(directory)
vals     <- data.frame()
for(i in 1:length(id)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
vals <- rbind(vals, read.csv(Full))
}
vals_sub <- vals[ ,pollutant]
out <- mean(vals_sub,na.rm = TRUE)
id <- 1:332
pollutant <- "nitrate"
AllFiles <- list.files(directory)
vals     <- data.frame()
for(i in 1:length(id)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
vals <- rbind(vals, read.csv(Full))
}
vals_sub <- vals[ ,pollutant]
out <- mean(vals_sub,na.rm = TRUE)
AllFiles <- list.files(directory)
vals     <- data.frame()
for(i in 1:length(id)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
vals <- rbind(vals, read.csv(Full))
}
vals_sub <- vals[ ,pollutant]
out <- mean(vals_sub,na.rm = TRUE)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
cc
cc <- complete("specdata", 54
)
cc$nobs
set.seed(42)
cc <- complete("specdata", 332:1)
use<-sample(332,10)
print(cc[use,"nobs"])
cr <- corr("specdata")
cr<-sort(cr)
cr <- sort(cr)
View(cr)
?sort
cr1 <- as.vector(cr)
View(cr1)
cr <- sort(cr)
cr1 <- sort(cr1)
cr1 <- sort(cr1, na.last = NA)
cr1 <- sort.int(cr1, na.last = NA)
?sort.int
Comp <- complete(directory)
# only use those above the threshold
ToUse <-Comp[Comp[,2] >= threshold,1]
corval <- data.frame()
AllFiles <- list.files(directory)
for(i in 1:length(ToUse)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
oneF <- read.csv(Full)
x <- oneF[,"sulfate"]
y <- oneF[,"nitrate"]
corval <- rbind(corval, cor(x, y,use = "pairwise.complete.obs"))
}
cr <- sort(corval)
cr <- order(corval)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(corval[out])
print(corval[out,1])
cr <- sort(corval[,1])
set.seed(868)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr[,1])
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
corr <- function(directory, threshold = 0){
## 'directory' is a character vector of length 1 indicating the location
## of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number
## of completely observed observations (on all variables) required to
## compute the correlation between  nitrate and sulfate; the default
## is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
## use function cor
# Find the number of complete values for all files
Comp <- complete(directory)
# only use those above the threshold
ToUse <-Comp[Comp[,2] >= threshold,1]
corval <- vector()
# get files and for loop over files for correlation
AllFiles <- list.files(directory)
for(i in 1:length(ToUse)){
Full <- paste(directory,AllFiles[id[i]], sep = "/")
oneF <- read.csv(Full)
x <- oneF[,"sulfate"]
y <- oneF[,"nitrate"]
corval <- rbind(corval, cor(x, y,use = "pairwise.complete.obs"))
}
corval
}
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("specdata", 2000)
View(Comp)
n = 4
n <- 4
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
?gl
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <-flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$langmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris$Species = "virginica", iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species = "virginica", mean)
apply(iris$Sepal.Length, iris$Species = "virginica", mean)
apply(iris$Sepal.Length, iris$Species, mean)
apply(iris$Sepal.Length, iris$Species = 'virginica', mean)
?apply
View(iris)
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
a <- apply(iris[,1:4], 2, mean)
a <- rowMeans(iris[, 1:4])
a
apply(iris,1 mean)
apply(iris,1, mean)
colMeans(iris)
apply(iris, 2 mean)
apply(iris, 2, mean)
class(a)
a <- apply(iris[,1:4], 2, mean)
class(a)
library(datasets)
data("mtcars")
?mtcars
data(mtcars)
tapply(mtcars$mpg, mtars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
a <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
a
abs(a$8 - a$4)
a$4
a.4
a$"4"
abs(a[3] - a[1])
26.6363 - 15.1
debug(ls)
ls(y ~ x)
0
exit
undebug(ls)
list.files()
cd "ProgrammingAssignment2/"
cd("ProgrammingAssignment2/")
?cd
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
X <- makeVector(rnorm(200,200,1))
X
getwd()
setwd("/Users/vflanagin2/Documents/Education/Coursera/DataScienceSpecialization/002_RProgramming/ProgrammingAssignment2")
getwd()
ls
?solve
a <- makeCacheM
list(get = get, set = set, getinv = getinv, setinv = setinv)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(get = get, set = set, getinv = getinv, setinv = setinv)
}
source('~/Documents/Education/Coursera/DataScienceSpecialization/002_RProgramming/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix(rnorm(100,10,10))
a
cacheSolve(a
)
cacheSolve(makeCacheMatrix(rnorm(100,10,10)))
b <- rnorm(400,20,20)
b
length(b)
dim(b)
b <- rnorm(100,10,10)
?rnorm
b <- rnorm(100)
?matrix
b <- matrix(rnorm(400), nrow = 20, ncol = 20)
b
a <- cacheSolve(b)
a <- matrixCacheMatrix(b)
a <- makeCacheMatrix(b)
a
c <- cacheSolve(a)
c
solve(b)
b
